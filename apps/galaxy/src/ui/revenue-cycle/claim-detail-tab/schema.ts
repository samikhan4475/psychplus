import { DateValue } from 'react-aria-components'
import z from 'zod'

const dateValidation = z.custom<DateValue>()

// Define Claim ServiceLines schema
const claimServiceLinesSchema = z.object({
  id: z.string().optional(),
  recordStatus: z.string().optional(),
  claimId: z.string().optional(),
  chargeId: z.string().optional(),
  cptCode: z.string().optional(),
  cptDescription: z.string().optional(),
  nationalDrugCode: z.string().optional(),
  modifierCode1: z.string().optional(),
  modifierCode2: z.string().optional(),
  modifierCode3: z.string().optional(),
  modifierCode4: z.string().optional(),
  diagnosisPointer1: z.string().optional(),
  diagnosisPointer2: z.string().optional(),
  diagnosisPointer3: z.string().optional(),
  diagnosisPointer4: z.string().optional(),
  serviceLineNotes: z.string().optional(),
  authorizationNumber: z.string().optional(),
  deletedReason: z.string().optional(),
  minutes: z.string().optional(),
  startTime: z.string().optional(),
  endTime: z.string().optional(),
  sequenceNo: z.coerce.number().optional(),
  dateOfServiceFrom: z.date(),
  dateOfServiceTo: z.date(),
  units: z.coerce.number().optional(),
  nationalDrugCodeMeasureUnit: z.string().optional(),
  unitAmount: z.coerce.number().optional(),
  totalAmount: z.coerce.number().optional(),
  placeOfService: z.string().optional(),
  isDoNotBill: z.boolean(),
  statusCode: z.string().optional(),
  isAnesthesia: z.boolean(),
})

// Define Claim Diagnosis schema
const claimDiagnosisSchema = z.object({
  id: z.string().optional(),
  recordStatus: z.string().optional(),
  claimId: z.string().optional(),
  diagnosisCode: z.string().optional(),
  diagnosisDescription: z.string().optional(),
  deletedReason: z.string().optional(),
  sequenceNo: z.coerce.number().optional(),
})

// Define Claim update Schema 
const claimUpdateSchema = z.object({
  id: z.string().uuid().optional(),
  recordStatus: z.string().optional(),
  practiceId: z.string().optional(),
  appointmentId: z.string().optional(),
  claimNumber: z.string(),
  locationId: z.string().optional(),
  renderingProviderId: z.string().optional(),
  attendingProviderId: z.string().optional(),
  supervisingProviderId: z.string().optional(),
  orderingProviderId: z.string().optional(),
  referringProviderId: z.string().optional(),
  patientId: z.coerce.number().optional(),
  placeOfService: z.string().optional(),
  dateOfServiceFrom: dateValidation.optional(),
  dateOfServiceTo: dateValidation.optional(),
  claimType: z.string().optional(),
  authorizationNumber: z.string().optional(),
  referralNumber: z.string().optional(),
  clinicalLaboratoryImprovementAmendmentsNumber: z.string().optional(),
  claimNotes: z.string().optional(),
  payerClaimControlNumber: z.string().optional(),
  primaryStatusCode: z.string().optional(),
  secondaryStatusCode: z.string().optional(),
  tertiaryStatusCode: z.string().optional(),
  patientStatusCode: z.string().optional(),
  createFrom: z.string().optional(),
  deletedReason: z.string().optional(),
  totalAmount: z.coerce.number().optional(),
  amountDue: z.coerce.number().optional(),
  primaryPaid: z.coerce.number().optional(),
  secondaryPaid: z.coerce.number().optional(),
  tertiaryPaid: z.coerce.number().optional(),
  claimStatusCode: z.string().optional(),
  isMarkAsSubmitted: z.boolean(),
  isSubmitted: z.boolean(),
  submittedDate: dateValidation.optional(),
  isHoldStatement: z.boolean(),
  isResubmitted: z.boolean(),
  isForcePaper: z.boolean(),
  rejectionReason: z.string().optional(),
  isSelfPay: z.boolean(),
  isDraft: z.boolean(),
  isHold: z.boolean(),
  isClaimScrubbed: z.boolean(),
  isForceUnlock: z.boolean(),
  forceUnlockDate: dateValidation.optional(),
  forceUnlockReason: z.string().optional(),
  primaryPatientInsurancePolicyId: z.string().optional(),
  secondaryPatientInsurancePolicyId: z.string().optional(),
  tertiaryPatientInsurancePolicyId: z.string().optional(),
  accidentDate: dateValidation.optional(),
  accidentState: z.string().optional(),
  accidentType: z.string().optional(),
  isOutsideLab: z.boolean(),
  labCharges: z.coerce.number().optional(),
  isEmployment: z.boolean(),
  isAutoAccident: z.boolean(),
  isOtherAccident: z.boolean(),
  claimFrequencyCode: z.string().optional(),
  lastSeenDate: dateValidation.optional(),
  patientName: z.string().optional(),
  patientAccountNumber: z.string().optional(),
  patientDateOfBirth: z.string().optional(),
  patientGender: z.string().optional(),
  claimServiceLines: z.array(claimServiceLinesSchema),
  claimDiagnosis: z.array(claimDiagnosisSchema),
})

type ClaimUpdateSchemaType = z.infer<typeof claimUpdateSchema>

export { claimUpdateSchema, type ClaimUpdateSchemaType }
